// Code generated by protoc-gen-go. DO NOT EDIT.
// source: banana.proto

package banana

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the user's name.
type BananaRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size                 int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BananaRequest) Reset()         { *m = BananaRequest{} }
func (m *BananaRequest) String() string { return proto.CompactTextString(m) }
func (*BananaRequest) ProtoMessage()    {}
func (*BananaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0022f69d17e210ba, []int{0}
}

func (m *BananaRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BananaRequest.Unmarshal(m, b)
}
func (m *BananaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BananaRequest.Marshal(b, m, deterministic)
}
func (m *BananaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BananaRequest.Merge(m, src)
}
func (m *BananaRequest) XXX_Size() int {
	return xxx_messageInfo_BananaRequest.Size(m)
}
func (m *BananaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BananaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BananaRequest proto.InternalMessageInfo

func (m *BananaRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BananaRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

// The response message containing the greetings
type BananaReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Price                int64    `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BananaReply) Reset()         { *m = BananaReply{} }
func (m *BananaReply) String() string { return proto.CompactTextString(m) }
func (*BananaReply) ProtoMessage()    {}
func (*BananaReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_0022f69d17e210ba, []int{1}
}

func (m *BananaReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BananaReply.Unmarshal(m, b)
}
func (m *BananaReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BananaReply.Marshal(b, m, deterministic)
}
func (m *BananaReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BananaReply.Merge(m, src)
}
func (m *BananaReply) XXX_Size() int {
	return xxx_messageInfo_BananaReply.Size(m)
}
func (m *BananaReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BananaReply.DiscardUnknown(m)
}

var xxx_messageInfo_BananaReply proto.InternalMessageInfo

func (m *BananaReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *BananaReply) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func init() {
	proto.RegisterType((*BananaRequest)(nil), "banana.BananaRequest")
	proto.RegisterType((*BananaReply)(nil), "banana.BananaReply")
}

func init() { proto.RegisterFile("banana.proto", fileDescriptor_0022f69d17e210ba) }

var fileDescriptor_0022f69d17e210ba = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x4a, 0xcc, 0x4b,
	0xcc, 0x4b, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xcc, 0xb9, 0x78,
	0x9d, 0xc0, 0xac, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x21, 0x2e, 0x96, 0xbc, 0xc4,
	0xdc, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x1b, 0x24, 0x56, 0x9c, 0x59, 0x95,
	0x2a, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x1a, 0x04, 0x66, 0x2b, 0xd9, 0x72, 0x71, 0xc3, 0x34, 0x16,
	0xe4, 0x54, 0x0a, 0x49, 0x70, 0xb1, 0xe7, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xc3, 0x74, 0xc2, 0xb8,
	0x42, 0x22, 0x5c, 0xac, 0x05, 0x45, 0x99, 0xc9, 0x10, 0xdd, 0xcc, 0x41, 0x10, 0x8e, 0x91, 0x3d,
	0x17, 0x1b, 0x44, 0xbb, 0x90, 0x29, 0x17, 0xab, 0x7b, 0x51, 0x6a, 0x6a, 0x89, 0x90, 0xa8, 0x1e,
	0xd4, 0x85, 0x28, 0x0e, 0x92, 0x12, 0x46, 0x17, 0x2e, 0xc8, 0xa9, 0x54, 0x62, 0x48, 0x62, 0x03,
	0xfb, 0xc3, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x82, 0x7c, 0x92, 0x21, 0xd7, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BananaClient is the client API for Banana service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BananaClient interface {
	// Sends a greeting
	Greet(ctx context.Context, in *BananaRequest, opts ...grpc.CallOption) (*BananaReply, error)
}

type bananaClient struct {
	cc *grpc.ClientConn
}

func NewBananaClient(cc *grpc.ClientConn) BananaClient {
	return &bananaClient{cc}
}

func (c *bananaClient) Greet(ctx context.Context, in *BananaRequest, opts ...grpc.CallOption) (*BananaReply, error) {
	out := new(BananaReply)
	err := c.cc.Invoke(ctx, "/banana.Banana/Greet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BananaServer is the server API for Banana service.
type BananaServer interface {
	// Sends a greeting
	Greet(context.Context, *BananaRequest) (*BananaReply, error)
}

func RegisterBananaServer(s *grpc.Server, srv BananaServer) {
	s.RegisterService(&_Banana_serviceDesc, srv)
}

func _Banana_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BananaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BananaServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banana.Banana/Greet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BananaServer).Greet(ctx, req.(*BananaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Banana_serviceDesc = grpc.ServiceDesc{
	ServiceName: "banana.Banana",
	HandlerType: (*BananaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _Banana_Greet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banana.proto",
}
